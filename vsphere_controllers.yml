- hosts: localhost
  connection: local
  roles:
    - { role: avinetworks.avicontroller_vmware }
  gather_facts: True
  tasks:
    - name: "Create a VM {{ id }} folder on given datacenter"
      vcenter_folder:
        hostname: '{{ vcenter_host }}'
        username: '{{ vcenter_user }}'
        password: '{{ vcenter_password }}'
        validate_certs: False
        datacenter_name: "{{ dc }}"
        folder_name: "{{ id }}"
        folder_type: vm
        state: present
      delegate_to: localhost

    - name: "Create VM from Server Template"
      vmware_guest:
        hostname: '{{ vcenter_host }}'
        username: '{{ vcenter_user }}'
        password: '{{ vcenter_password }}'
        validate_certs: False
        name: "{{ id }}_jumpbox"
        template: "{{ server_template }}"
        datacenter: "{{ dc }}"
        folder: "{{ id }}"
        networks:
        - name: "{{ mgmt_network }}"
        - name: "{{ server_network }}"
        state: '{{ state | default("poweredon")}}'
        wait_for_ip_address: yes
      delegate_to: localhost
      register: jumpbox

    - name: "Create VM from Web Server Template"
      vmware_guest:
        hostname: '{{ vcenter_host }}'
        username: '{{ vcenter_user }}'
        password: '{{ vcenter_password }}'
        validate_certs: False
        name: "{{ id }}_webserver{{ item }}"
        template: "{{ server_template }}"
        datacenter: "{{ dc }}"
        folder: "{{ id }}"
        networks:
        - name: "{{ server_network }}"
        state: '{{ state | default("poweredon")}}'
        wait_for_ip_address: yes
      with_sequence: count={{ webserver_count }}
      delegate_to: localhost
      register: webservers

    - name: "Create VM from Avi Controller Template"
      vmware_guest:
        hostname: '{{ vcenter_host }}'
        username: '{{ vcenter_user }}'
        password: '{{ vcenter_password }}'
        validate_certs: False
        name: "{{ id }}_controller{{ item }}"
        template: "{{ avi_controller_template }}"
        datacenter: "{{ dc }}"
        folder: "{{ id }}"
        networks:
        - name: "{{ mgmt_network }}"
        state: '{{ state | default("poweredon")}}'
        wait_for_ip_address: yes
      with_sequence: count={{ pod_count }}
      delegate_to: localhost
      register: controllers

    - debug:
        msg: "Jumphost IP: {{ jumpbox.instance.ipv4 }}"
    - debug:
        msg: "{{ webservers.results[item|int].instance.hw_name }} {{ webservers.results[item|int].instance.ipv4 }}"
      with_sequence: start=0 end={{ webserver_count - 1 }}
    - debug:
        msg: "{{ controllers.results[item|int].instance.hw_name }} {{ controllers.results[item|int].instance.ipv4 }}"
      with_sequence: start=0 end={{ pod_count - 1 }}

    - lineinfile:
        path: inventory
        line: "{{ jumpbox.instance.hw_name }} {{ jumpbox.instance.ipv4 }}"
        create: yes
    - lineinfile:
        path: inventory
        line: "{{ webservers.results[item|int].instance.hw_name }} {{ webservers.results[item|int].instance.ipv4 }}"
      with_sequence: start=0 end={{ pod_count - 1 }}
    - lineinfile:
        path: inventory
        line: "{{ controllers.results[item|int].instance.hw_name }} {{ controllers.results[item|int].instance.ipv4 }}"
      with_sequence: start=0 end={{ pod_count - 1 }}

    - name: "Wait for the portal to become active"
      uri:
        url: "https://{{ controllers.results[item|int].instance.ipv4 }}/api/initial-data"
        validate_certs: no
        status_code: 200
      register: result
      until: result.status == 200
      retries: 600
      delay: 10
      with_sequence: start=0 end={{ pod_count - 1 }}

    - name: Prepare Avi credentials
      set_fact:
        avi_credentials: {}

    - name: Prepare Avi credentials
      set_fact:
        avi_credentials: "{{ avi_credentials | combine({ item.key: item.value }) }}"
      with_items:
      - { key: 'password', value: "{{ avi_admin_password }}" }
      - { key: 'api_version', value: "{{ result.results[0]['json']['version']['Version'] }}" }
      - { key: 'username', value: "admin" }

    - name: Update admin user account if required
      avi_useraccount:
        controller: "{{ controllers.results[item|int].instance.ipv4 }}"
        avi_credentials: "{{ avi_credentials }}"
        old_password: "{{ avi_default_password }}"
      ignore_errors: yes
      with_sequence: start=0 end={{ pod_count - 1 }}

    - name: Basic system configuration
      avi_systemconfiguration:
        controller: "{{ controllers.results[item|int].instance.ipv4 }}"
        avi_credentials: "{{ avi_credentials }}"
        welcome_workflow_complete: true
        dns_configuration:
          server_list:
            - addr: "{{ dns_server }}"
              type: V4
        ntp_configuration:
          ntp_server_list:
            - addr: 0.pool.ntp.org
              type: DNS
            - addr: 1.pool.ntp.org
              type: DNS
            - addr: 2.pool.ntp.org
              type: DNS
            - addr: 3.pool.ntp.org
              type: DNS
      with_sequence: start=0 end={{ pod_count - 1 }}

    - name: VMware Cloud Connector Facts
      avi_systemconfiguration:
        controller: "{{ controllers.results[item|int].instance.ipv4 }}"
        avi_credentials: "{{ avi_credentials }}"
        name: Default-Cloud
        vtype: CLOUD_VCENTER
        dhcp_enabled: true
        vcenter_configuration:
          username: "{{ vcenter_user }}"
          password: "{{ vcenter_password }}"
          datacenter: "{{ dc }}"
          management_network: "/api/vimgrnwruntime/?name={{ mgmt_network }}"
          privilege: "WRITE_ACCESS"
          vcenter_url: "{{ vcenter_host }}"
      with_sequence: start=0 end={{ pod_count - 1 }}
